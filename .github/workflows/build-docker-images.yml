name: Building and deploying Docker images of microservices

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      service:
        description: "Building service name (e.g.: auth-service, user-service, discovery-server, all)"
        required: true
        default: "all"
      version:
        description: "Image version (latest by default)"
        required: false
        default: "latest"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build project
        run: |
          SERVICES="${{ github.event.inputs.service }}"
          if [ -z "$SERVICES" ] || [ "$SERVICES" = "all" ]; then
            SERVICES="discovery-server api-gateway auth-service user-service"
          fi

          for SERVICE in $SERVICES; do
            echo "ðŸ›  Building $SERVICE module..."
            ./gradlew ":$SERVICE:build" -x test
          done

      - name: Set version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [ -z "$VERSION" ]; then
            VERSION="latest"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push Docker images
        run: |
          SERVICES="${{ github.event.inputs.service }}"
          if [ -z "$SERVICES" ] || [ "$SERVICES" = "all" ]; then
            SERVICES="discovery-server api-gateway auth-service user-service"
          fi
          
          for SERVICE in $SERVICES; do
            EXPOSE_PORT=8080
            echo "ðŸ“¦ Building $SERVICE on port $EXPOSE_PORT..."
            docker build \
              --build-arg SERVICE_MODULE=$SERVICE \
              --build-arg EXPOSE_PORT=$EXPOSE_PORT \
              -t ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE:${VERSION} \
              -t ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE:${{ github.sha }} \
              .
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE:${VERSION}
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/$SERVICE:${{ github.sha }}
          done
